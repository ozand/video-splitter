import os
import re
import sys
from pathlib import Path
from typing import List, Dict, Optional
import pandas as pd
import ffmpeg
import click


def parse_time_to_seconds(time_str: str) -> float:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ MM:SS –∏–ª–∏ HH:MM:SS –≤ —Å–µ–∫—É–Ω–¥—ã
    """
    try:
        parts = time_str.split(':')
        if len(parts) == 2:  # MM:SS
            minutes, seconds = map(int, parts)
            return minutes * 60 + seconds
        elif len(parts) == 3:  # HH:MM:SS
            hours, minutes, seconds = map(int, parts)
            return hours * 3600 + minutes * 60 + seconds
        else:
            raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: {time_str}")
    except ValueError as e:
        raise ValueError(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏ '{time_str}': {e}")


def parse_markdown_table(table_content: str) -> List[Dict]:
    """
    –ü–∞—Ä—Å–∏—Ç markdown —Ç–∞–±–ª–∏—Ü—É –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    """
    lines = table_content.strip().split('\n')
    
    # –ù–∞—Ö–æ–¥–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
    header_line = None
    for i, line in enumerate(lines):
        if '–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞' in line:
            header_line = i
            break
    
    if header_line is None:
        raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã —Å –Ω—É–∂–Ω—ã–º–∏ —Å—Ç–æ–ª–±—Ü–∞–º–∏")
    
    # –ü–∞—Ä—Å–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ (—É–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏ –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ)
    header_cells = [h.strip() for h in lines[header_line].split('|')]
    headers = [h for h in header_cells if h]
    
    # –ò—â–µ–º –∏–Ω–¥–µ–∫—Å—ã –Ω—É–∂–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
    scene_id_idx = None
    source_file_idx = None
    start_time_idx = None
    end_time_idx = None
    
    for i, header in enumerate(headers):
        if '–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã' in header or 'ID' in header:
            scene_id_idx = i
        elif '–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞' in header:
            source_file_idx = i
        elif '–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞' in header:
            start_time_idx = i
        elif '–í—Ä–µ–º—è –∫–æ–Ω—Ü–∞' in header:
            end_time_idx = i
    
    if None in [scene_id_idx, source_file_idx, start_time_idx, end_time_idx]:
        raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å—Ç–æ–ª–±—Ü—ã –≤ —Ç–∞–±–ª–∏—Ü–µ")
    
    # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å)
    data_rows = []
    for line in lines[header_line + 2:]:  # +2 —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        if line.strip() and '|' in line:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —è—á–µ–π–∫–∏, —Å–æ—Ö—Ä–∞–Ω—è—è –ø—É—Å—Ç—ã–µ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ–¥—Å—á–µ—Ç–∞ –ø–æ–∑–∏—Ü–∏–π
            all_cells = [cell.strip() for cell in line.split('|')]
            
            # –£–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é –∏ –ø–æ—Å–ª–µ–¥–Ω—é—é –ø—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏ (–æ–±—Ä–∞–º–ª—è—é—â–∏–µ |)
            if all_cells and not all_cells[0]:
                all_cells.pop(0)
            if all_cells and not all_cells[-1]:
                all_cells.pop()
            
            # –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º, —É—á–∏—Ç—ã–≤–∞—è —á—Ç–æ –ø—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ
            scene_id = ""
            source_file = ""
            start_time = ""
            end_time = ""
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º
            if scene_id_idx < len(all_cells):
                scene_id = all_cells[scene_id_idx]
            if source_file_idx < len(all_cells):
                source_file = all_cells[source_file_idx]
            if start_time_idx < len(all_cells):
                start_time = all_cells[start_time_idx]
            if end_time_idx < len(all_cells):
                end_time = all_cells[end_time_idx]
            
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
            if not (scene_id and source_file and start_time and end_time):
                non_empty_cells = [c for c in all_cells if c]
                temp_scene_id = ""
                temp_source_file = ""
                temp_start_time = ""
                temp_end_time = ""
                
                for cell in non_empty_cells:
                    if re.search(r'`[^`]+`', cell):  # ID —Å—Ü–µ–Ω—ã –≤ –∫–∞–≤—ã—á–∫–∞—Ö
                        if not temp_scene_id:
                            temp_scene_id = cell
                        elif cell.endswith('.mp4') or '.mp4' in cell:  # –í–∏–¥–µ–æ—Ñ–∞–π–ª –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –∫–∞–≤—ã—á–∫–∞—Ö
                            if not temp_source_file:
                                temp_source_file = cell
                    elif re.search(r'\d{2}:\d{2}', cell):  # –í—Ä–µ–º—è
                        if not temp_start_time:
                            temp_start_time = cell
                        elif not temp_end_time:
                            temp_end_time = cell
                    elif (cell.endswith('.mp4') or cell.endswith('.avi') or cell.endswith('.mov') or 
                          cell.endswith('.mkv') or cell.endswith('.wmv') or cell.endswith('.flv') or cell.endswith('.webm')):
                        if not temp_source_file:
                            temp_source_file = cell
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—É—Å—Ç—ã–µ
                if not scene_id:
                    scene_id = temp_scene_id
                if not source_file:
                    source_file = temp_source_file
                if not start_time:
                    start_time = temp_start_time
                if not end_time:
                    end_time = temp_end_time
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Å—Ü–µ–Ω—ã –∏–∑ –æ–±—Ä–∞—Ç–Ω—ã—Ö –∫–∞–≤—ã—á–µ–∫
            scene_id_match = re.search(r'`([^`]+)`', scene_id)
            if scene_id_match:
                scene_id = scene_id_match.group(1)
            
            # –£–±–∏—Ä–∞–µ–º –æ–±—Ä–∞—Ç–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            source_file_match = re.search(r'`([^`]+)`', source_file)
            if source_file_match:
                source_file = source_file_match.group(1)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
            if source_file and start_time and end_time and scene_id:
                data_rows.append({
                    'scene_id': scene_id,
                    'source_file': source_file,
                    'start_time': start_time,
                    'end_time': end_time
                })
    
    return data_rows


def find_video_file(source_filename: str, video_folder: Path) -> Optional[Path]:
    """
    –ù–∞—Ö–æ–¥–∏—Ç –≤–∏–¥–µ–æ—Ñ–∞–π–ª –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ
    """
    video_extensions = ['.mp4', '.avi', '.mov', '.mkv', '.wmv', '.flv', '.webm']
    
    # –ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ —Ñ–∞–π–ª–∞
    direct_path = video_folder / source_filename
    if direct_path.exists():
        return direct_path
    
    # –ü–æ–∏—Å–∫ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è (–µ—Å–ª–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è)
    name_without_ext = Path(source_filename).stem
    for ext in video_extensions:
        candidate = video_folder / f"{name_without_ext}{ext}"
        if candidate.exists():
            return candidate
    
    # –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º —Ñ–∞–π–ª–∞–º –≤ –ø–∞–ø–∫–µ
    for file_path in video_folder.rglob('*'):
        if file_path.is_file() and file_path.suffix.lower() in video_extensions:
            if file_path.name == source_filename or file_path.stem == name_without_ext:
                return file_path
    
    return None


def cut_video_segment(input_path: Path, output_path: Path, start_time: str, end_time: str) -> bool:
    """
    –í—ã—Ä–µ–∑–∞–µ—Ç —Å–µ–≥–º–µ–Ω—Ç –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é ffmpeg
    """
    try:
        start_seconds = parse_time_to_seconds(start_time)
        end_seconds = parse_time_to_seconds(end_time)
        duration = end_seconds - start_seconds
        
        if duration <= 0:
            print(f"‚ö†Ô∏è  –ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤—Ä–µ–º–µ–Ω–∏: {start_time} - {end_time}")
            return False
        
        # –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω—É—é –ø–∞–ø–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        output_path.parent.mkdir(parents=True, exist_ok=True)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–∞—Ä–µ–∑–∫—É –≤–∏–¥–µ–æ
        (
            ffmpeg
            .input(str(input_path), ss=start_seconds)
            .output(str(output_path), t=duration, c='copy')
            .overwrite_output()
            .run(quiet=True)
        )
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {e}")
        return False


@click.command()
@click.option('--table', '-t', required=True, type=click.Path(exists=True), 
              help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É markdown —Å —Ç–∞–±–ª–∏—Ü–µ–π')
@click.option('--videos', '-v', required=True, type=click.Path(exists=True), 
              help='–ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞–º–∏')
@click.option('--output', '-o', required=True, type=click.Path(), 
              help='–ü—É—Ç—å –∫ –ø–∞–ø–∫–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤')
def main(table, videos, output):
    """
    –°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Ä–µ–∑–∫–∏ –≤–∏–¥–µ–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∞–±–ª–∏—Ü—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ markdown
    """
    print("üé¨ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ...")
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø—É—Ç–∏
    table_path = Path(table)
    videos_path = Path(videos)
    output_path = Path(output)
    
    # –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω—É—é –ø–∞–ø–∫—É
    output_path.mkdir(parents=True, exist_ok=True)
    
    try:
        # –ß–∏—Ç–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        print(f"üìã –ß—Ç–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏–∑ {table_path}")
        with open(table_path, 'r', encoding='utf-8') as f:
            table_content = f.read()
        
        # –ü–∞—Ä—Å–∏–º —Ç–∞–±–ª–∏—Ü—É
        scenes_data = parse_markdown_table(table_content)
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(scenes_data)} —Å—Ü–µ–Ω –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ü–µ–Ω—É
        success_count = 0
        error_count = 0
        
        for i, scene in enumerate(scenes_data, 1):
            print(f"\nüéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ü–µ–Ω—ã {i}/{len(scenes_data)}: {scene['scene_id']}")
            
            # –ù–∞—Ö–æ–¥–∏–º –∏—Å—Ö–æ–¥–Ω—ã–π –≤–∏–¥–µ–æ—Ñ–∞–π–ª
            source_video = find_video_file(scene['source_file'], videos_path)
            if not source_video:
                print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª: {scene['source_file']}")
                error_count += 1
                continue
            
            print(f"üìÅ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª: {source_video}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
            output_file = output_path / f"{scene['scene_id']}.mp4"
            
            # –í—ã—Ä–µ–∑–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç
            print(f"‚úÇÔ∏è  –ù–∞—Ä–µ–∑–∫–∞: {scene['start_time']} - {scene['end_time']}")
            if cut_video_segment(source_video, output_file, scene['start_time'], scene['end_time']):
                print(f"‚úÖ –ì–æ—Ç–æ–≤–æ: {output_file}")
                success_count += 1
            else:
                error_count += 1
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"\nüìä –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}")
        print(f"‚ùå –û—à–∏–±–æ–∫: {error_count}")
        
        if success_count > 0:
            print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_path}")
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
